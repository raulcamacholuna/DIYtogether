document.addEventListener('DOMContentLoaded', () => {

    // --- 1. L√ìGICA DE NAVEGACI√ìN POR PESTA√ëAS ---
    const tabs = document.querySelectorAll('.tab-btn');
    const contentPanels = document.querySelectorAll('.content-panel');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            tabs.forEach(t => t.classList.remove('active'));
            contentPanels.forEach(p => p.classList.remove('active'));

            tab.classList.add('active');
            const targetPanel = document.querySelector(tab.dataset.target);
            if (targetPanel) {
                targetPanel.classList.add('active');
                if (tab.dataset.target === '#files-panel' && !fileListDiv.innerHTML.includes('file-item')) {
                    fetchFileList('/');
                }
            }
        });
    });

    // --- 2. L√ìGICA PARA ELEMENTOS INTERACTIVOS (EXISTENTE) ---
    const showNotification = (elementId, message, type = 'success') => {
        const notificationEl = document.getElementById(elementId);
        if (!notificationEl) return;
        
        notificationEl.className = 'notification';
        notificationEl.classList.add(type, 'show');
        notificationEl.textContent = message;

        setTimeout(() => {
            notificationEl.classList.remove('show');
        }, 4000);
    };
    
    // ... (resto del c√≥digo de Sliders, DHCP toggle, etc.)
    const brightnessSlider = document.getElementById('brightness');
    if(brightnessSlider) {
        const brightnessValue = document.getElementById('brightness-value');
        brightnessSlider.addEventListener('input', () => {
            brightnessValue.textContent = `${brightnessSlider.value}%`;
        });
    }

    // ... y el resto del c√≥digo JS ...


    // --- 4. L√ìGICA DEL GESTOR DE ARCHIVOS ---
    let currentPath = '/';
    const fileInput = document.getElementById('file-input');
    const fileListDiv = document.getElementById('file-list');
    const pathDisplay = document.getElementById('current-path-display');
    
    const formatBytes = (bytes, decimals = 2) => {
        if (!+bytes) return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
    };

    const renderFileList = (files, path) => {
        let parentPath = path.substring(0, path.lastIndexOf('/')) || '/';
        let html = (path !== '/') ? `<div class="file-item"><div><a href="#" class="dir-link" data-path="${parentPath}">‚§¥Ô∏è ..</a></div></div>` : '';
        
        if (!files || files.length === 0) {
            fileListDiv.innerHTML = html + '<p style="text-align:center;padding:40px;color:#aaa">Directorio vac√≠o.</p>';
            return;
        }
        
        files.sort((a,b) => (a.type === b.type) ? a.name.localeCompare(b.name) : a.type === 'dir' ? -1 : 1).forEach(f => {
            const icon = f.type === 'dir' ? 'üìÅ' : 'üìÑ';
            const fullPath = path === '/' ? `/${f.name}` : `${path}/${f.name}`;
            const nameHtml = f.type === 'dir' 
                ? `<a href="#" class="dir-link" data-path="${fullPath}">${f.name}</a>` 
                : `<span>${f.name} (${formatBytes(f.size)})</span>`;

            html += `
                <div class="file-item">
                    <div>${icon} ${nameHtml}</div>
                    <div>
                        ${f.type === 'dir' ? `<button class="btn btn-small btn-secondary dir-link" data-path="${fullPath}">Abrir</button>` : ''}
                        <button class="btn btn-small btn-secondary rename-btn" data-path="${path}" data-filename="${f.name}">Editar</button>
                        <button class="btn btn-small btn-danger delete-btn" data-path="${path}" data-filename="${f.name}">Eliminar</button>
                    </div>
                </div>`;
        });
        fileListDiv.innerHTML = html;
    };

    const fetchFileList = async (path) => {
        currentPath = path;
        pathDisplay.textContent = `Ruta actual: ${path}`;
        fileListDiv.innerHTML = '<p style="text-align:center;padding:20px;color:#999">Cargando...</p>';

        console.log(`Simulando fetch para la ruta: ${path}`);
        setTimeout(() => {
            const exampleData = {
                '/': [{type:'dir', name:'skins', size:0}, {type:'file', name:'config.json', size:2100}, {type:'file', name:'splash.bmp', size:45200}],
                '/skins': [{type:'dir', name:'unicorn', size:0}, {type:'file', name:'default.zip', size:120000}],
                '/skins/unicorn': [{type:'file', name:'face.png', size: 5600}]
            };
            renderFileList(exampleData[path] || [], path);
        }, 500);
    };
    
    // ... (resto de funciones de manejo de archivos: handleFileUpload, createItem, etc.)

    document.getElementById('upload-file-btn').addEventListener('click', () => fileInput.click());
    document.getElementById('refresh-files').addEventListener('click', () => fetchFileList(currentPath));
    document.getElementById('create-folder').addEventListener('click', () => createItem('dir'));
    fileInput.addEventListener('change', e => handleFileUpload(e.target.files));

    ['dragenter','dragover','dragleave','drop'].forEach(e => fileListDiv.addEventListener(e, evt => { evt.preventDefault(); evt.stopPropagation(); }));
    ['dragenter','dragover'].forEach(e => fileListDiv.addEventListener(e, () => fileListDiv.classList.add('dragover')));
    ['dragleave','drop'].forEach(e => fileListDiv.addEventListener(e, () => fileListDiv.classList.remove('dragover')));
    fileListDiv.addEventListener('drop', e => handleFileUpload(e.dataTransfer.files));

    fileListDiv.addEventListener('click', e => {
        const target = e.target;
        const dirLink = target.closest('.dir-link');
        const delBtn = target.closest('.delete-btn');
        const renBtn = target.closest('.rename-btn');

        if (dirLink) {
            e.preventDefault();
            fetchFileList(dirLink.dataset.path);
        } else if (delBtn) {
            deleteItem(delBtn.dataset.path, delBtn.dataset.filename);
        } else if (renBtn) {
            renameItem(renBtn.dataset.path, renBtn.dataset.filename);
        }
    });

    // Carga inicial de archivos solo si el panel est√° activo al inicio
    if (document.querySelector('#files-panel').classList.contains('active')) {
        fetchFileList('/');
    }
});